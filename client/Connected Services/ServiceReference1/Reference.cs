//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Chef", Namespace="http://schemas.datacontract.org/2004/07/chef_servicelibrary")]
    [System.SerializableAttribute()]
    public partial class Chef : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int chefIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int chefId {
            get {
                return this.chefIdField;
            }
            set {
                if ((this.chefIdField.Equals(value) != true)) {
                    this.chefIdField = value;
                    this.RaisePropertyChanged("chefId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Ichefservice")]
    public interface Ichefservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/AddChef", ReplyAction="http://tempuri.org/Ichefservice/AddChefResponse")]
        void AddChef(client.ServiceReference1.Chef chef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/AddChef", ReplyAction="http://tempuri.org/Ichefservice/AddChefResponse")]
        System.Threading.Tasks.Task AddChefAsync(client.ServiceReference1.Chef chef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/GetChefs", ReplyAction="http://tempuri.org/Ichefservice/GetChefsResponse")]
        System.Data.DataSet GetChefs(int chefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/GetChefs", ReplyAction="http://tempuri.org/Ichefservice/GetChefsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetChefsAsync(int chefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/GetChef", ReplyAction="http://tempuri.org/Ichefservice/GetChefResponse")]
        client.ServiceReference1.Chef GetChef(int chefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/GetChef", ReplyAction="http://tempuri.org/Ichefservice/GetChefResponse")]
        System.Threading.Tasks.Task<client.ServiceReference1.Chef> GetChefAsync(int chefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/UpdateChef", ReplyAction="http://tempuri.org/Ichefservice/UpdateChefResponse")]
        void UpdateChef(client.ServiceReference1.Chef chef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/UpdateChef", ReplyAction="http://tempuri.org/Ichefservice/UpdateChefResponse")]
        System.Threading.Tasks.Task UpdateChefAsync(client.ServiceReference1.Chef chef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/DeleteChef", ReplyAction="http://tempuri.org/Ichefservice/DeleteChefResponse")]
        void DeleteChef(int chefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Ichefservice/DeleteChef", ReplyAction="http://tempuri.org/Ichefservice/DeleteChefResponse")]
        System.Threading.Tasks.Task DeleteChefAsync(int chefId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IchefserviceChannel : client.ServiceReference1.Ichefservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IchefserviceClient : System.ServiceModel.ClientBase<client.ServiceReference1.Ichefservice>, client.ServiceReference1.Ichefservice {
        
        public IchefserviceClient() {
        }
        
        public IchefserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IchefserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IchefserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IchefserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddChef(client.ServiceReference1.Chef chef) {
            base.Channel.AddChef(chef);
        }
        
        public System.Threading.Tasks.Task AddChefAsync(client.ServiceReference1.Chef chef) {
            return base.Channel.AddChefAsync(chef);
        }
        
        public System.Data.DataSet GetChefs(int chefId) {
            return base.Channel.GetChefs(chefId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetChefsAsync(int chefId) {
            return base.Channel.GetChefsAsync(chefId);
        }
        
        public client.ServiceReference1.Chef GetChef(int chefId) {
            return base.Channel.GetChef(chefId);
        }
        
        public System.Threading.Tasks.Task<client.ServiceReference1.Chef> GetChefAsync(int chefId) {
            return base.Channel.GetChefAsync(chefId);
        }
        
        public void UpdateChef(client.ServiceReference1.Chef chef) {
            base.Channel.UpdateChef(chef);
        }
        
        public System.Threading.Tasks.Task UpdateChefAsync(client.ServiceReference1.Chef chef) {
            return base.Channel.UpdateChefAsync(chef);
        }
        
        public void DeleteChef(int chefId) {
            base.Channel.DeleteChef(chefId);
        }
        
        public System.Threading.Tasks.Task DeleteChefAsync(int chefId) {
            return base.Channel.DeleteChefAsync(chefId);
        }
    }
}
